# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T02:38:54+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class SasPortalAssignment(BaseModel):
    members: Optional[List[str]] = Field(
        None,
        description='The identities the role is assigned to. It can have the following values: * `{user_email}`: An email address that represents a specific Google account. For example: `alice@gmail.com`. * `{group_email}`: An email address that represents a Google group. For example, `viewers@gmail.com`.',
    )
    role: Optional[str] = Field(
        None, description='Required. Role that is assigned to `members`.'
    )


class SasPortalCreateSignedDeviceRequest(BaseModel):
    encodedDevice: Optional[str] = Field(
        None,
        description='Required. JSON Web Token signed using a CPI private key. Payload must be the JSON encoding of the device. The user_id field must be set.',
    )
    installerId: Optional[str] = Field(
        None,
        description='Required. Unique installer id (CPI ID) from the Certified Professional Installers database.',
    )


class SasPortalCustomer(BaseModel):
    displayName: Optional[str] = Field(
        None,
        description='Required. Name of the organization that the customer entity represents.',
    )
    name: Optional[str] = Field(
        None, description='Output only. Resource name of the customer.'
    )
    sasUserIds: Optional[List[str]] = Field(
        None, description='User IDs used by the devices belonging to this customer.'
    )


class SasPortalDeployment(BaseModel):
    displayName: Optional[str] = Field(
        None, description="The deployment's display name."
    )
    frns: Optional[List[str]] = Field(
        None,
        description='Output only. The FCC Registration Numbers (FRNs) copied from its direct parent.',
    )
    name: Optional[str] = Field(None, description='Output only. Resource name.')
    sasUserIds: Optional[List[str]] = Field(
        None,
        description='User ID used by the devices belonging to this deployment. Each deployment should be associated with one unique user ID.',
    )


class State(Enum):
    DEVICE_STATE_UNSPECIFIED = 'DEVICE_STATE_UNSPECIFIED'
    RESERVED = 'RESERVED'
    REGISTERED = 'REGISTERED'
    DEREGISTERED = 'DEREGISTERED'


class RadioTechnology(Enum):
    RADIO_TECHNOLOGY_UNSPECIFIED = 'RADIO_TECHNOLOGY_UNSPECIFIED'
    E_UTRA = 'E_UTRA'
    CAMBIUM_NETWORKS = 'CAMBIUM_NETWORKS'
    FOUR_G_BBW_SAA_1 = 'FOUR_G_BBW_SAA_1'
    NR = 'NR'
    DOODLE_CBRS = 'DOODLE_CBRS'
    CW = 'CW'
    REDLINE = 'REDLINE'
    TARANA_WIRELESS = 'TARANA_WIRELESS'


class SasPortalDeviceAirInterface(BaseModel):
    radioTechnology: Optional[RadioTechnology] = Field(
        None,
        description='Conditional. This field specifies the radio access technology that is used for the CBSD.',
    )
    supportedSpec: Optional[str] = Field(
        None,
        description='Optional. This field is related to the `radioTechnology` and provides the air interface specification that the CBSD is compliant with at the time of registration.',
    )


class Category(Enum):
    DEVICE_CATEGORY_UNSPECIFIED = 'DEVICE_CATEGORY_UNSPECIFIED'
    DEVICE_CATEGORY_A = 'DEVICE_CATEGORY_A'
    DEVICE_CATEGORY_B = 'DEVICE_CATEGORY_B'


class MeasurementCapability(Enum):
    MEASUREMENT_CAPABILITY_UNSPECIFIED = 'MEASUREMENT_CAPABILITY_UNSPECIFIED'
    MEASUREMENT_CAPABILITY_RECEIVED_POWER_WITH_GRANT = (
        'MEASUREMENT_CAPABILITY_RECEIVED_POWER_WITH_GRANT'
    )
    MEASUREMENT_CAPABILITY_RECEIVED_POWER_WITHOUT_GRANT = (
        'MEASUREMENT_CAPABILITY_RECEIVED_POWER_WITHOUT_GRANT'
    )


class State1(Enum):
    DEVICE_CONFIG_STATE_UNSPECIFIED = 'DEVICE_CONFIG_STATE_UNSPECIFIED'
    DRAFT = 'DRAFT'
    FINAL = 'FINAL'


class ChannelType(Enum):
    CHANNEL_TYPE_UNSPECIFIED = 'CHANNEL_TYPE_UNSPECIFIED'
    CHANNEL_TYPE_GAA = 'CHANNEL_TYPE_GAA'
    CHANNEL_TYPE_PAL = 'CHANNEL_TYPE_PAL'


class State2(Enum):
    GRANT_STATE_UNSPECIFIED = 'GRANT_STATE_UNSPECIFIED'
    GRANT_STATE_GRANTED = 'GRANT_STATE_GRANTED'
    GRANT_STATE_TERMINATED = 'GRANT_STATE_TERMINATED'
    GRANT_STATE_SUSPENDED = 'GRANT_STATE_SUSPENDED'
    GRANT_STATE_AUTHORIZED = 'GRANT_STATE_AUTHORIZED'
    GRANT_STATE_EXPIRED = 'GRANT_STATE_EXPIRED'


class SasPortalDeviceModel(BaseModel):
    firmwareVersion: Optional[str] = Field(
        None, description='The firmware version of the device.'
    )
    hardwareVersion: Optional[str] = Field(
        None, description='The hardware version of the device.'
    )
    name: Optional[str] = Field(None, description='The name of the device model.')
    softwareVersion: Optional[str] = Field(
        None, description='The software version of the device.'
    )
    vendor: Optional[str] = Field(None, description='The name of the device vendor.')


class SasPortalEmpty(BaseModel):
    pass


class SasPortalFrequencyRange(BaseModel):
    highFrequencyMhz: Optional[float] = Field(
        None, description='The highest frequency of the frequency range in MHz.'
    )
    lowFrequencyMhz: Optional[float] = Field(
        None, description='The lowest frequency of the frequency range in MHz.'
    )


class SasPortalGenerateSecretRequest(BaseModel):
    pass


class SasPortalGenerateSecretResponse(BaseModel):
    secret: Optional[str] = Field(
        None,
        description='The secret generated by the string and used by ValidateInstaller.',
    )


class SasPortalGetPolicyRequest(BaseModel):
    resource: Optional[str] = Field(
        None,
        description='Required. The resource for which the policy is being requested.',
    )


class HeightType(Enum):
    HEIGHT_TYPE_UNSPECIFIED = 'HEIGHT_TYPE_UNSPECIFIED'
    HEIGHT_TYPE_AGL = 'HEIGHT_TYPE_AGL'
    HEIGHT_TYPE_AMSL = 'HEIGHT_TYPE_AMSL'


class SasPortalInstallationParams(BaseModel):
    antennaAzimuth: Optional[int] = Field(
        None,
        description='Boresight direction of the horizontal plane of the antenna in degrees with respect to true north. The value of this parameter is an integer with a value between 0 and 359 inclusive. A value of 0 degrees means true north; a value of 90 degrees means east. This parameter is optional for Category A devices and conditional for Category B devices.',
    )
    antennaBeamwidth: Optional[int] = Field(
        None,
        description='3-dB antenna beamwidth of the antenna in the horizontal-plane in degrees. This parameter is an unsigned integer having a value between 0 and 360 (degrees) inclusive; it is optional for Category A devices and conditional for Category B devices.',
    )
    antennaDowntilt: Optional[int] = Field(
        None,
        description='Antenna downtilt in degrees and is an integer with a value between -90 and +90 inclusive; a negative value means the antenna is tilted up (above horizontal). This parameter is optional for Category A devices and conditional for Category B devices.',
    )
    antennaGain: Optional[int] = Field(
        None,
        description='Peak antenna gain in dBi. This parameter is an integer with a value between -127 and +128 (dBi) inclusive.',
    )
    antennaGainNewField: Optional[float] = Field(
        None, description='As above, but as a DoubleValue.'
    )
    antennaModel: Optional[str] = Field(
        None,
        description='If an external antenna is used, the antenna model is optionally provided in this field. The string has a maximum length of 128 octets.',
    )
    cpeCbsdIndication: Optional[bool] = Field(
        None,
        description='If present, this parameter specifies whether the CBSD is a CPE-CBSD or not.',
    )
    eirpCapability: Optional[int] = Field(
        None,
        description='This parameter is the maximum device EIRP in units of dBm/10MHz and is an integer with a value between -127 and +47 (dBm/10 MHz) inclusive. If not included, SAS interprets it as maximum allowable EIRP in units of dBm/10MHz for device category.',
    )
    eirpCapabilityNewField: Optional[float] = Field(
        None, description='As above, but as a DoubleValue.'
    )
    height: Optional[float] = Field(
        None,
        description='Device antenna height in meters. When the `heightType` parameter value is "AGL", the antenna height should be given relative to ground level. When the `heightType` parameter value is "AMSL", it is given with respect to WGS84 datum.',
    )
    heightType: Optional[HeightType] = Field(
        None, description='Specifies how the height is measured.'
    )
    horizontalAccuracy: Optional[float] = Field(
        None,
        description='A positive number in meters to indicate accuracy of the device antenna horizontal location. This optional parameter should only be present if its value is less than the FCC requirement of 50 meters.',
    )
    indoorDeployment: Optional[bool] = Field(
        None,
        description='Whether the device antenna is indoor or not. `true`: indoor. `false`: outdoor.',
    )
    latitude: Optional[float] = Field(
        None,
        description='Latitude of the device antenna location in degrees relative to the WGS 84 datum. The allowed range is from -90.000000 to +90.000000. Positive values represent latitudes north of the equator; negative values south of the equator.',
    )
    longitude: Optional[float] = Field(
        None,
        description='Longitude of the device antenna location in degrees relative to the WGS 84 datum. The allowed range is from -180.000000 to +180.000000. Positive values represent longitudes east of the prime meridian; negative values west of the prime meridian.',
    )
    verticalAccuracy: Optional[float] = Field(
        None,
        description='A positive number in meters to indicate accuracy of the device antenna vertical location. This optional parameter should only be present if its value is less than the FCC requirement of 3 meters.',
    )


class SasPortalListCustomersResponse(BaseModel):
    customers: Optional[List[SasPortalCustomer]] = Field(
        None, description='The list of customers that match the request.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='A pagination token returned from a previous call to ListCustomers that indicates from where listing should continue. If the field is missing or empty, it means there are no more customers.',
    )


class SasPortalListDeploymentsResponse(BaseModel):
    deployments: Optional[List[SasPortalDeployment]] = Field(
        None, description='The deployments that match the request.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='A pagination token returned from a previous call to ListDeployments that indicates from where listing should continue. If the field is missing or empty, it means there are no more deployments.',
    )


class SasPortalMoveDeploymentRequest(BaseModel):
    destination: Optional[str] = Field(
        None,
        description='Required. The name of the new parent resource node or customer to reparent the deployment under.',
    )


class SasPortalMoveDeviceRequest(BaseModel):
    destination: Optional[str] = Field(
        None,
        description='Required. The name of the new parent resource node or customer to reparent the device under.',
    )


class SasPortalMoveNodeRequest(BaseModel):
    destination: Optional[str] = Field(
        None,
        description='Required. The name of the new parent resource node or customer to reparent the node under.',
    )


class SasPortalNode(BaseModel):
    displayName: Optional[str] = Field(None, description="The node's display name.")
    name: Optional[str] = Field(None, description='Output only. Resource name.')
    sasUserIds: Optional[List[str]] = Field(
        None, description='User ids used by the devices belonging to this node.'
    )


class State3(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    DRAFT = 'DRAFT'
    FINAL = 'FINAL'


class SasPortalNrqzValidation(BaseModel):
    caseId: Optional[str] = Field(None, description='Validation case ID.')
    cpiId: Optional[str] = Field(None, description='CPI who signed the validation.')
    latitude: Optional[float] = Field(
        None, description="Device latitude that's associated with the validation."
    )
    longitude: Optional[float] = Field(
        None, description="Device longitude that's associated with the validation."
    )
    state: Optional[State3] = Field(
        None, description='State of the NRQZ validation info.'
    )


class SasPortalPolicy(BaseModel):
    assignments: Optional[List[SasPortalAssignment]] = Field(
        None, description='List of assignments'
    )
    etag: Optional[str] = Field(
        None,
        description='The etag is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the etag in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An etag is returned in the response to GetPolicy, and systems are expected to put that etag in the request to SetPolicy to ensure that their change will be applied to the same version of the policy. If no etag is provided in the call to GetPolicy, then the existing policy is overwritten blindly.',
    )


class SasPortalProvisionDeploymentRequest(BaseModel):
    newDeploymentDisplayName: Optional[str] = Field(
        None,
        description='Optional. If this field is set, and a new SAS Portal Deployment needs to be created, its display name will be set to the value of this field.',
    )
    newOrganizationDisplayName: Optional[str] = Field(
        None,
        description='Optional. If this field is set, and a new SAS Portal Organization needs to be created, its display name will be set to the value of this field.',
    )


class SasPortalProvisionDeploymentResponse(BaseModel):
    errorMessage: Optional[str] = Field(
        None,
        description='Optional. Optional error message if the provisioning request is not successful.',
    )


class SasPortalSetPolicyRequest(BaseModel):
    disableNotification: Optional[bool] = Field(
        None,
        description='Optional. Set the field as `true` to disable the onboarding notification.',
    )
    policy: Optional[SasPortalPolicy] = Field(
        None, description='Required. The policy to be applied to the `resource`.'
    )
    resource: Optional[str] = Field(
        None,
        description='Required. The resource for which the policy is being specified. This policy replaces any existing policy.',
    )


class SasPortalStatus(BaseModel):
    code: Optional[int] = Field(
        None,
        description='The status code, which should be an enum value of google.rpc.Code.',
    )
    details: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='A list of messages that carry the error details. There is a common set of message types for APIs to use.',
    )
    message: Optional[str] = Field(
        None,
        description='A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.',
    )


class SasPortalTestPermissionsRequest(BaseModel):
    permissions: Optional[List[str]] = Field(
        None, description='The set of permissions to check for the `resource`.'
    )
    resource: Optional[str] = Field(
        None,
        description='Required. The resource for which the permissions are being requested.',
    )


class SasPortalTestPermissionsResponse(BaseModel):
    permissions: Optional[List[str]] = Field(
        None, description='A set of permissions that the caller is allowed.'
    )


class SasPortalUpdateSignedDeviceRequest(BaseModel):
    encodedDevice: Optional[str] = Field(
        None,
        description='Required. The JSON Web Token signed using a CPI private key. Payload must be the JSON encoding of the device. The user_id field must be set.',
    )
    installerId: Optional[str] = Field(
        None,
        description='Required. Unique installer ID (CPI ID) from the Certified Professional Installers database.',
    )


class SasPortalValidateInstallerRequest(BaseModel):
    encodedSecret: Optional[str] = Field(
        None,
        description='Required. JSON Web Token signed using a CPI private key. Payload must include a "secret" claim whose value is the secret.',
    )
    installerId: Optional[str] = Field(
        None,
        description='Required. Unique installer id (CPI ID) from the Certified Professional Installers database.',
    )
    secret: Optional[str] = Field(
        None, description='Required. Secret returned by the GenerateSecret.'
    )


class SasPortalValidateInstallerResponse(BaseModel):
    pass


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class SasPortalChannelWithScore(BaseModel):
    frequencyRange: Optional[SasPortalFrequencyRange] = Field(
        None, description='The frequency range of the channel.'
    )
    score: Optional[float] = Field(
        None, description='The channel score, normalized to be in the range [0,100].'
    )


class SasPortalDeviceConfig(BaseModel):
    airInterface: Optional[SasPortalDeviceAirInterface] = Field(
        None, description="Information about this device's air interface."
    )
    callSign: Optional[str] = Field(
        None, description='The call sign of the device operator.'
    )
    category: Optional[Category] = Field(
        None, description='FCC category of the device.'
    )
    installationParams: Optional[SasPortalInstallationParams] = Field(
        None, description='Installation parameters for the device.'
    )
    isSigned: Optional[bool] = Field(
        None,
        description='Output only. Whether the configuration has been signed by a CPI.',
    )
    measurementCapabilities: Optional[List[MeasurementCapability]] = Field(
        None, description='Measurement reporting capabilities of the device.'
    )
    model: Optional[SasPortalDeviceModel] = Field(
        None, description='Information about this device model.'
    )
    state: Optional[State1] = Field(None, description='State of the configuration.')
    updateTime: Optional[str] = Field(
        None,
        description='Output only. The last time the device configuration was edited.',
    )
    userId: Optional[str] = Field(None, description='The identifier of a device user.')


class SasPortalDeviceMetadata(BaseModel):
    antennaModel: Optional[str] = Field(
        None,
        description='If populated, the Antenna Model Pattern to use. Format is: `RecordCreatorId:PatternId`',
    )
    commonChannelGroup: Optional[str] = Field(
        None,
        description='Common Channel Group (CCG). A group of CBSDs in the same ICG requesting a common primary channel assignment. For more details, see [CBRSA-TS-2001 V3.0.0](https://ongoalliance.org/wp-content/uploads/2020/02/CBRSA-TS-2001-V3.0.0_Approved-for-publication.pdf).',
    )
    interferenceCoordinationGroup: Optional[str] = Field(
        None,
        description='Interference Coordination Group (ICG). A group of CBSDs that manage their own interference with the group. For more details, see [CBRSA-TS-2001 V3.0.0](https://ongoalliance.org/wp-content/uploads/2020/02/CBRSA-TS-2001-V3.0.0_Approved-for-publication.pdf).',
    )
    nrqzValidated: Optional[bool] = Field(
        None,
        description='Output only. Set to `true` if a CPI has validated that they have coordinated with the National Quiet Zone office.',
    )
    nrqzValidation: Optional[SasPortalNrqzValidation] = Field(
        None, description='Output only. National Radio Quiet Zone validation info.'
    )


class SasPortalDpaMoveList(BaseModel):
    dpaId: Optional[str] = Field(None, description='The ID of the DPA.')
    frequencyRange: Optional[SasPortalFrequencyRange] = Field(
        None, description='The frequency range that the move list affects.'
    )


class SasPortalListNodesResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='A pagination token returned from a previous call to ListNodes that indicates from where listing should continue. If the field is missing or empty, it means there is no more nodes.',
    )
    nodes: Optional[List[SasPortalNode]] = Field(
        None, description='The nodes that match the request.'
    )


class SasPortalOperation(BaseModel):
    done: Optional[bool] = Field(
        None,
        description='If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.',
    )
    error: Optional[SasPortalStatus] = Field(
        None,
        description='The error result of the operation in case of failure or cancellation.',
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.',
    )
    name: Optional[str] = Field(
        None,
        description='The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.',
    )
    response: Optional[Dict[str, Any]] = Field(
        None,
        description='The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.',
    )


class SasPortalDeviceGrant(BaseModel):
    channelType: Optional[ChannelType] = Field(
        None, description='Type of channel used.'
    )
    expireTime: Optional[str] = Field(
        None, description='The expiration time of the grant.'
    )
    frequencyRange: Optional[SasPortalFrequencyRange] = Field(
        None, description='The transmission frequency range.'
    )
    grantId: Optional[str] = Field(None, description='Grant Id.')
    lastHeartbeatTransmitExpireTime: Optional[str] = Field(
        None, description='The transmit expiration time of the last heartbeat.'
    )
    maxEirp: Optional[float] = Field(
        None,
        description='Maximum Equivalent Isotropically Radiated Power (EIRP) permitted by the grant. The maximum EIRP is in units of dBm/MHz. The value of `maxEirp` represents the average (RMS) EIRP that would be measured by the procedure defined in FCC part 96.41(e)(3).',
    )
    moveList: Optional[List[SasPortalDpaMoveList]] = Field(
        None, description='The DPA move lists on which this grant appears.'
    )
    state: Optional[State2] = Field(None, description='State of the grant.')
    suspensionReason: Optional[List[str]] = Field(
        None, description='If the grant is suspended, the reason(s) for suspension.'
    )


class SasPortalDevice(BaseModel):
    activeConfig: Optional[SasPortalDeviceConfig] = Field(
        None,
        description='Output only. Current configuration of the device as registered to the SAS.',
    )
    currentChannels: Optional[List[SasPortalChannelWithScore]] = Field(
        None, description='Output only. Current channels with scores.'
    )
    deviceMetadata: Optional[SasPortalDeviceMetadata] = Field(
        None,
        description='Device parameters that can be overridden by both SAS Portal and SAS registration requests.',
    )
    displayName: Optional[str] = Field(None, description='Device display name.')
    fccId: Optional[str] = Field(None, description='The FCC identifier of the device.')
    grantRangeAllowlists: Optional[List[SasPortalFrequencyRange]] = Field(
        None,
        description='Only ranges that are within the allowlists are available for new grants.',
    )
    grants: Optional[List[SasPortalDeviceGrant]] = Field(
        None, description='Output only. Grants held by the device.'
    )
    name: Optional[str] = Field(
        None, description='Output only. The resource path name.'
    )
    preloadedConfig: Optional[SasPortalDeviceConfig] = Field(
        None,
        description='Configuration of the device, as specified via SAS Portal API.',
    )
    serialNumber: Optional[str] = Field(
        None,
        description='A serial number assigned to the device by the device manufacturer.',
    )
    state: Optional[State] = Field(None, description='Output only. Device state.')


class SasPortalListDevicesResponse(BaseModel):
    devices: Optional[List[SasPortalDevice]] = Field(
        None, description='The devices that match the request.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='A pagination token returned from a previous call to ListDevices that indicates from where listing should continue. If the field is missing or empty, it means there is no more devices.',
    )


class SasPortalSignDeviceRequest(BaseModel):
    device: Optional[SasPortalDevice] = Field(
        None,
        description='Required. The device to sign. The device fields name, fcc_id and serial_number must be set. The user_id field must be set.',
    )
